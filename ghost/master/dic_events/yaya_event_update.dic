// ===================================================================
// OnUpdate ***
// ===================================================================
OnUpdateBegin
{
    SHIORI3FW.RegisterTempVar('update_self', 'update_other_type', 'update_other_name')
    update_self = 0
    update_other_type = ''
    update_other_name = ''

    _type = On_Update_targetList(reference[3])
    _name = SHIORI3FW.EscapeDangerousTags(reference[0])

    if basewarenameex == 'embryo' {
        update_self = 1
    }
    elseif reference[0] == SHIORI3FW.GhostName && reference[3] == 'ghost' {
        update_self = 1
    }

    if update_self == 1 {
        '\h\s[6]ネットワーク更新を確認中。'
        '\h\s[0]\u\s[11]更新を確認しまーす！'
        '\h\s[0]\u\s[16]妖術で更新があるか確かめています…\w5…\w5。\w9\w9\h\s[4]ええ…\w5…\w5？'
    }
    else {
        update_other_type = _type
        update_other_name = _name
        "\h\s[6]%(_type)、\w5%(_name)のネットワーク更新を開始。"
    }
}

On_Update_targetList
{
    if _argc <= 0 {
        0
        return
    }
    case TOSTR(_argv[0]) {
    when 'shell' {
        'シェル'
    }
    when 'ghost' {
        'ゴースト'
    }
    when 'balloon' {
        'バルーン'
    }
    when 'headline' {
        'ヘッドライン'
    }
    when 'plugin' {
        'プラグイン'
    }
    when 'baseware' {
        'ベースウェア'
    }
    others {
        '不明なタイプ'
    }
    }
}

On_Update_other_header
{
    if update_self == 1 || (update_other_type == '' || update_other_name == '') {
        ''
        return
    }
    _type = SHIORI3FW.EscapeAllTags(update_other_type)
    _name = SHIORI3FW.EscapeAllTags(update_other_name)
    "\_q\h@@l%(_type) : %(_name)\n\n[half]\_q"
}

OnUpdateReady
{
    On_Update_other_header
    --
    _files = TOINT(reference[0]) + 1
    "\u\s[10]\h\s[0]%(_files)個の更新ファイルが見つかった。\w9\n\w9\w9\u更新、\w5開始しまーす！"
    "\h\s[0]\u\s[10]%(_files)個のファイルを発見！\w9\w9\h更新、\w5開始。"
}

OnUpdateComplete
{
    On_Update_other_header
    --
    if reference[0] == 'none' {
        '\h\s[6]更新ファイルなし。\w9\s[0]すでに最新だ。\n\n'
        '\h\s[0]\u\s[16]更新、\w5無し！'
    }
    elseif reference[0] == 'changed' {
        On_Status.pride.p0.increase(1)

        '\h\s[5]更新が完了した。\n\n'
        '\h\s[0]\u\s[10]更新、\w5完了！'
    }
    else {
        On_Status.pride.p0.decrease(1)
        '\h\s[3]予期せぬエラーかもしれない。\n\n'
    }

    --
    '\h'
    --
    if update_self == 1 {
        FillLine_list_full('更新履歴を見る', 'On_Update_log')
    }
    --
    FillLine_list_full('閉じる', 'CLOSE_NOTALK')
}

OnUpdateFailure
{
    On_Update_other_header
    --
    On_Status.pride.p0.decrease(1)
    case reference[0] {
    when 'timeout' {
        '\h\s[0]更新サーバーに接続できなかった。\w9\n後でまた試してみてくれ。\n'
    }
    when 'too slow' {
        '\h\s[0]回線が非常に重く、\w5更新できなかった。\n'
    }
    when 'md5 miss' {
        '\u\s[10]\h\s[4]更新ファイルの破損、\w5またはシステムの不調で、\w5更新ができなかった。\w9\w9'
        --
        if update_self == 1 {
            '\uお手数ですが、\w5作者に報告をしていただけると助かります。\n'
        }
        else {
            '\uもし、\w5作者の方と連絡がとれるなら、\w5このことをお知らせして下さるとよいかと。\n'
        }
    }
    when 'artificial' {
        '\h\s[6]更新を中断した。\n'
    }
    // SSP
    when 'fileio' {
        '\h\s[0]更新ファイルを書き込む容量がなかった。\n'
    }
    when 'readonly' {
        '\h\s[0]ファイルが読み取り専用となっていて書き込めない。\n'
    }
    others {
        if TOINT(reference[0]) > 0 {
            "\h\s[3]ステータスコード%(TOINT(reference[0]))にて失敗した。\n"
        }
        else {
            _s = SHIORI3FW.EscapeDangerousTags(reference[0])
            "\h\s[3]更新に失敗した。\w9\n理由は、「%(_s)」のようだ。\n"
        }
    }
    }
}

OnUpdate.OnDownloadBegin
{
    On_Update_other_header
    --
    _name = SHIORI3FW.EscapeAllTags(reference[0])
    if basewarenameex != "crow" {
        _num = TOINT(reference[1])
        _num += 1

        "\h\s[6]%(_num)個目のファイル、「%(_name)」のダウンロードを開始。\n"
    }
    else {
        "\h\s[6]ファイル、「%(_name)」のダウンロード開始。\n"
    }
}

// OnUpdate.OnMD5CompareBegin {
// '\h\s[6]ファイルの正当性を確認している。\n\e'
// }

// OnUpdate.OnMD5CompareComplete {
// '\h\s[0]ファイルに問題無し。\w9\nデータを適用。\n\e'
// }

OnUpdate.OnMD5CompareFailure
{
    On_Update_other_header
    --
    '\h\s[3]ファイルに問題があった。\w9\nデータ破棄。\n'
}

OnUpdateOtherBegin
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdateBegin,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOtherReady
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdateReady,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOtherComplete
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdateComplete,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOtherFailure
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdateFailure,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOther.OnDownloadBegin
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdate.OnDownloadBegin,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOther.OnMD5CompareBegin
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdate.OnMD5CompareBegin,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOther.OnMD5CompareComplete
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdate.OnMD5CompareComplete,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

OnUpdateOther.OnMD5CompareFailure
{
    _ref = IARRAY
    foreach reference; _r {
        _ref ,= '"' + SHIORI3FW.EscapeAllTags(_r) + '"'
    }

    "\![raise,OnUpdate.OnMD5CompareFailure,%(_ref[0]),%(_ref[1]),%(_ref[2]),%(_ref[3]),%(_ref[4])]"
}

On_Update_log
{
    _header = '\_q' + On_Update_log_header() + '\_q'
    _footer = On_Update_log_footer()
    _item = On_Update_log_body()

    Paging_begin(_header, _footer, 10, 2, 0, _item)
}

On_Update_log_header
{
    '\u\s[10]\h\s[0]前回までの更新履歴だ。'
    '\u\s[10]\h\s[0]\u前回までの更新履歴です。\h'
}

On_Update_log_footer
{
    FillLine_list_full('メニューへ', 'On_Menu_0')
    --
    FillLine_list_full('閉じる', 'CLOSE_NOTALK')
}

On_Update_log_body : array
{
    // 新しいものが上にくるようにする。
    '2024-01-06: 01-07限定トーク・通常トーク、それぞれ微増。「MailBox」での一部メール読了時、起動トークに変化が起こるように。'
    '2023-12-30: 新年限定トーク追加。通常トーク微増。'
    '2023-12-24: プラグイン「MailBox」対応。12-31起動トーク・日付限定トーク追加。metainfo-standard用「.ukagaka」ファイルを追加。'
    '2023-12-17: クリスマス起動トーク・日付限定トーク追加。通常トーク微増。'
    '2023-12-10: 通常トーク・冬トーク、それぞれ微増。12-13限定起動トーク追加。バグや軽微な点の修正。'
    '2023-12-03: 通常トーク微増。その他軽微な修正。'
    '2023-11-26: 通常トーク・12月トーク、それぞれ微増。システム辞書・SHIORI更新。'
    '2023-11-19: 通常トーク微増・微修正。アイコンをマルチサイズに変更。その他軽微な修正。'
    '2023-11-12: 通常トーク微増。ポータルなどのリンクを更新。'
    '2023-11-05: 通常トーク増加。'
    '2023-10-29: 通常トーク微増。他軽微な変更。'
    '2023-10-20: 時報17時(秋)のバグ修正。ハロウィン限定トーク追加。通常トーク微増。他軽微な修正。'
    '2023-07-02: システム辞書更新。ユーザーの誕生日関連の設定・起動トーク追加。おやつ追加。夏トーク・通常トーク、それぞれ微増。バグ修正(「もう一度話す」機能、AIグラフ)。'
    '2023-06-27: 07-07限定トーク追加。トーク微増。'
    '2023-05-14: 5月トーク・通常トークそれぞれ微増。'
    '2023-04-02: 4月トーク・通常トークそれぞれ微増。イベント「OnRecycleBinEmpty」「OnUpdateOther」暫定対応。'
    '2023-03-12: トーク増加。ホワイトデー起動トーク追加。'
    '2023-03-05: トーク増加。春トーク・3月トーク、それぞれ微増。'
    '2023-02-26: トーク増加。その他軽微な修正。'
    '2023-02-21: ホワイトデー限定トーク追加。02-22限定トーク追加。トーク微増。'
    '2023-02-16: 起動トーク微増。トーク増加。その他軽微な修正。'
    '2023-02-11: リロード時トーク刷新。バレンタインデー起動トーク、限定トーク微量追加。トーク微増。その他軽微な修正。'
    '2023-02-06: システム辞書更新。バレンタインデー限定トーク微量追加。トーク微増。'
    '2023-02-01: システム辞書更新。マウス反応増加。トーク微増。'
    '2023-01-25: Readme更新。トーク微増。'
    '2023-01-20: バグ修正。トーク微増。起動時トーク・終了時トークそれぞれ微増。'
    '2023-01-13: おやつ反応更新。プラグイン「GetWindowTitle」対応。トーク微増。その他軽微な修正。'
    '2023-01-07: バグ修正。トーク微増。おやつ反応微増。'
    '2023-01-02: Readme更新。バグ修正。トーク微増。'
    '2022-12-22: おやつメニュー追加。トーク微増。'
    '2022-12-13: 初版公開。'
    '2022-12-**: 仮公開。'
}

// ===================================================================
// BalloonTooltip
// ===================================================================

BalloonTooltip_On_Update_log
{
    '更新履歴を見る'
}
