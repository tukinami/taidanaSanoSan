// ===================================================================
// OnUpdate ***
// ===================================================================
OnUpdateBegin {
    _update_self = 0
    _type = On_Update_targetList(reference[3])
    _name = SHIORI3FW.EscapeDangerousTags(reference[0])

    if basewarenameex == 'embryo' {
        _update_self = 1
    }
    elseif reference[0] == SHIORI3FW.GhostName && reference[3] == 'ghost' {
        _update_self = 1
    }

    if _update_self > 0 {
        '\h\s[6]ネットワーク更新を確認中。'
        '\h\s[0]\u\s[11]更新を確認しまーす！'
        '\h\s[0]\u\s[16]妖術で更新があるか確かめています…\w5…\w5。\w9\w9\h\s[4]ええ…\w5…\w5？'
    }
    else {
        "\h\s[6]%(_type)、\w5%(_name)のネットワーク更新を開始。"
    }
}

On_Update_targetList {
    if _argc <= 0 {
        0
        return
    }
    case TOSTR(_argv[0]) {
        when 'shell' {
            'シェル'
        }
        when 'ghost' {
            'ゴースト'
        }
        when 'balloon' {
            'バルーン'
        }
        when 'headline' {
            'ヘッドライン'
        }
        when 'plugin' {
            'プラグイン'
        }
        when 'baseware' {
            'ベースウェア'
        }
        others {
            '不明なタイプ'
        }
    }
}

OnUpdateReady {
    _files = TOINT(reference[0]) + 1
    "\u\s[10]\h\s[0]%(_files)個の更新ファイルが見つかった。\w9\n\w9\w9\u更新、\w5開始しまーす！"
    "\h\s[0]\u\s[10]%(_files)個のファイルを発見！\w9\w9\h更新、\w5開始。"
}

OnUpdateComplete {
    if reference[0]  == 'none' {
        '\h\s[6]更新ファイルなし。\w9\s[0]すでに最新だ。\n\n'
        '\h\s[0]\u\s[16]更新、\w5無し！\h'
        --
        FillLine_list_full('更新履歴を見る', 'On_Update_log')
        --
        FillLine_list_full('閉じる', 'CLOSE_NOTALK')
    }
    elseif reference[0] == 'changed' {
        On_Status.pride.p0.increase(1)
        '\h\s[5]更新が完了した。\n\n'
        '\h\s[0]\u\s[10]更新、\w5完了！'
        --
        '\h'
        --
        FillLine_list_full('更新履歴を見る', 'On_Update_log')
        --
        FillLine_list_full('閉じる', 'CLOSE_NOTALK')
    }
    else {
        On_Status.pride.p0.decrease(1)
        '\h\s[3]予期せぬエラーかもしれない。\n'
    }
}

OnUpdateFailure {
    On_Status.pride.p0.decrease(1)
    case reference[0] {
        when 'timeout' {
            '\h\s[0]更新サーバーに接続できなかった。\w9\n後でまた試してみてくれ。\n'
        }
        when 'too slow' {
            '\h\s[0]回線が非常に重く、\w5更新できなかった。\n'
        }
        when 'md5 miss' {
            '\u\s[10]\h\s[4]更新ファイルの破損、\w5またはシステムの不調で、\w5更新ができなかった。\w9\w9\uお手数ですが、\w5作者に報告をしていただけると助かります。\n'
        }
        when 'artificial' {
            '\h\s[6]更新を中断した。\n'
        }
        // SSP
        when 'fileio' {
            '\h\s[0]更新ファイルを書き込む容量がなかった。\n'
        }
        when 'readonly' {
            '\h\s[0]ファイルが読み取り専用となっていて書き込めない。\n'
        }
        others {
            if TOINT(reference[0]) > 0 {
                "\h\s[3]ステータスコード%(TOINT(reference[0]))にて失敗した。\n"
            }
            else {
                _s = SHIORI3FW.EscapeDangerousTags(reference[0])
                "\h\s[3]更新に失敗した。\w9\n理由は、「%(_s)」のようだ。\n"
            }
        }
    }
}

OnUpdate.OnDownloadBegin {
    _name = SHIORI3FW.EscapeDangerousTags(reference[0])

    if basewarenameex != "crow" {
        _num = TOINT(reference[1])
        _num += 1

        "\h\s[6]%(_num)個目のファイル、「%(_name)」のダウンロードを開始。\n"
    }
    else {
        "\h\s[6]ファイル、「%(_name)」のダウンロード開始。\n"
    }
}

// OnUpdate.OnMD5CompareBegin {
//     '\h\s[6]ファイルの正当性を確認している。\n\e'
// }

// OnUpdate.OnMD5CompareComplete {
//     '\h\s[0]ファイルに問題無し。\w9\nデータを適用。\n\e'
// }

OnUpdate.OnMD5CompareFailure {
    '\h\s[3]ファイルに問題があった。\w9\nデータ破棄。\n'
}

On_Update_log {
    _header = '\_q' + On_Update_log_header() + '\_q'
    _footer = On_Update_log_footer()
    _item = On_Update_log_body()

    Paging_begin(_header, _footer, 10, 2, 0, _item)
}

On_Update_log_header {
    '\u\s[10]\h\s[0]前回までの更新履歴だ。'
    '\u\s[10]\h\s[0]\u前回までの更新履歴です。\h'
}

On_Update_log_footer {
    FillLine_list_full('メニューへ', 'On_Menu_0')
    --
    FillLine_list_full('閉じる', 'CLOSE_NOTALK')
}

On_Update_log_body : array {
    // 新しいものが上にくるようにする。
    '2023-02-26: トーク増加。その他軽微な修正。'
    '2023-02-21: ホワイトデー限定トーク追加。02-22限定トーク追加。トーク微増。'
    '2023-02-16: 起動トーク微増。トーク増加。その他軽微な修正。'
    '2023-02-11: リロード時トーク刷新。バレンタインデー起動トーク、限定トーク微量追加。トーク微増。その他軽微な修正。'
    '2023-02-06: システム辞書更新。バレンタインデー限定トーク微量追加。トーク微増。'
    '2023-02-01: システム辞書更新。マウス反応増加。トーク微増。'
    '2023-01-25: Readme更新。トーク微増。'
    '2023-01-20: バグ修正。トーク微増。起動時トーク・終了時トークそれぞれ微増。'
    '2023-01-13: おやつ反応更新。プラグイン「GetWindowTitle」対応。トーク微増。その他軽微な修正。'
    '2023-01-07: バグ修正。トーク微増。おやつ反応微増。'
    '2023-01-02: Readme更新。バグ修正。トーク微増。'
    '2022-12-22: おやつメニュー追加。トーク微増。'
    '2022-12-13: 初版公開。'
    '2022-12-**: 仮公開。'
}

// ===================================================================
// BalloonTooltip
// ===================================================================

BalloonTooltip_On_Update_log {
    '更新履歴を見る'
}